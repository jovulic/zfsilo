// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converterimpl

import (
	v1 "github.com/jovulic/zfsilo/api/gen/go/zfsilo/v1"
	iface "github.com/jovulic/zfsilo/app/internal/converter/iface"
	database "github.com/jovulic/zfsilo/app/internal/database"
)

type VolumeConverterImpl struct{}

func (c *VolumeConverterImpl) FromAPIToDB(source *v1.Volume) (database.Volume, error) {
	var databaseVolume database.Volume
	if source != nil {
		var databaseVolume2 database.Volume
		datatypesJSON, err := iface.ConvertFromStructToJSON((*source).Struct)
		if err != nil {
			return databaseVolume, err
		}
		databaseVolume2.Struct = datatypesJSON
		timeTime, err := iface.ConvertTimestampToTime((*source).CreateTime)
		if err != nil {
			return databaseVolume, err
		}
		databaseVolume2.CreateTime = timeTime
		timeTime2, err := iface.ConvertTimestampToTime((*source).UpdateTime)
		if err != nil {
			return databaseVolume, err
		}
		databaseVolume2.UpdateTime = timeTime2
		databaseVolume2.ID = (*source).Id
		databaseVolume2.Name = (*source).Name
		databaseVolume2.DatasetID = (*source).DatasetId
		databaseVolume2.Options = iface.ConvertVolumeOptionsFromAPIToDB((*source).Options)
		databaseVolume2.Sparse = (*source).Sparse
		databaseVolume2.Mode = iface.ConvertVolumeModeFromAPIToDB((*source).Mode)
		databaseVolume2.CapacityBytes = (*source).CapacityBytes
		if (*source).InitiatorIqn != nil {
			databaseVolume2.InitiatorIQN = *(*source).InitiatorIqn
		}
		if (*source).TargetIqn != nil {
			databaseVolume2.TargetIQN = *(*source).TargetIqn
		}
		if (*source).TargetAddress != nil {
			databaseVolume2.TargetAddress = *(*source).TargetAddress
		}
		if (*source).MountPath != nil {
			databaseVolume2.MountPath = *(*source).MountPath
		}
		databaseVolume = databaseVolume2
	}
	return databaseVolume, nil
}
func (c *VolumeConverterImpl) FromDBToAPI(source database.Volume) (*v1.Volume, error) {
	var zfsilov1Volume v1.Volume
	pStructpbStruct, err := iface.ConvertFromJSONToStruct(source.Struct)
	if err != nil {
		return nil, err
	}
	zfsilov1Volume.Struct = pStructpbStruct
	pTimestamppbTimestamp, err := iface.ConvertTimeToTimestamp(source.CreateTime)
	if err != nil {
		return nil, err
	}
	zfsilov1Volume.CreateTime = pTimestamppbTimestamp
	pTimestamppbTimestamp2, err := iface.ConvertTimeToTimestamp(source.UpdateTime)
	if err != nil {
		return nil, err
	}
	zfsilov1Volume.UpdateTime = pTimestamppbTimestamp2
	zfsilov1Volume.Id = source.ID
	zfsilov1Volume.Name = source.Name
	zfsilov1Volume.DatasetId = source.DatasetID
	zfsilov1Volume.Options = iface.ConvertVolumeOptionsFromDBToAPI(source.Options)
	zfsilov1Volume.Sparse = source.Sparse
	zfsilov1Volume.Mode = iface.ConvertVolumeModeFromDBToAPI(source.Mode)
	zfsilov1Volume.CapacityBytes = source.CapacityBytes
	pString := source.InitiatorIQN
	zfsilov1Volume.InitiatorIqn = &pString
	pString2 := source.TargetIQN
	zfsilov1Volume.TargetIqn = &pString2
	pString3 := source.TargetAddress
	zfsilov1Volume.TargetAddress = &pString3
	pString4 := source.MountPath
	zfsilov1Volume.MountPath = &pString4
	return &zfsilov1Volume, nil
}
